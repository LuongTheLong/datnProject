// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["referentialIntegrity"]
}

datasource db {
    provider             = "mysql" // NOTE: sqlite does not work with NextAuth.js
    url                  = env("DATABASE_URL")
    referentialIntegrity = "prisma"
}

model Example {
    id String @id @default(cuid())
}

enum ROLE {
    ADMIN
    MANAGER
    WORKER
    USER
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String?
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    firstTime     Boolean   @default(true)
    accounts      Account[]
    sessions      Session[]
    point         Int       @default(0)
    role          ROLE      @default(USER)
    orders        Order[]
    products      Cart[]
    createdAt     DateTime  @default(now())
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Category {
    id             String           @id @default(cuid())
    title          String
    slug           String
    products       Product[]
    isDeleted      Boolean          @default(false)
    OptionCategory OptionCategory[]
}

model Cart {
    id        String  @id @default(cuid())
    productId String
    userId    String
    quantity  Int
    product   Product @relation(fields: [productId], references: [id])
    user      User    @relation(fields: [userId], references: [id])

    @@index([productId, userId])
}

model Product {
    id           String        @id @default(cuid())
    title        String
    code         String
    price        Int
    image        String
    description  String?
    categoryId   String
    isDeleted    Boolean       @default(false)
    category     Category?     @relation(fields: [categoryId], references: [id])
    orderDetails OrderDetail[]
    cart         Cart[]
    createdAt    DateTime      @default(now())

    @@index([categoryId])
}

model Order {
    id         String        @id @default(cuid())
    userId     String
    user       User          @relation(fields: [userId], references: [id])
    grandTotal Int
    tax        Int
    products   OrderDetail[]
    createdAt  DateTime      @default(now())
    updatedAt  DateTime?     @default(now())

    @@index([userId])
}

model OrderDetail {
    id        String  @id @default(cuid())
    quantity  Int
    price     Int
    productId String
    product   Product @relation(fields: [productId], references: [id])
    orderId   String
    order     Order   @relation(fields: [orderId], references: [id])

    @@index([productId, orderId])
}

model OptionCategory {
    id         String   @id @default(cuid())
    title      String
    code       String
    categoryId String
    category   Category @relation(fields: [categoryId], references: [id])
    Choice     Choice[]

    @@index([categoryId])
}

model Choice {
    id               String         @id @default(cuid())
    title            String
    price            Int
    optionCategoryId String
    optionCategory   OptionCategory @relation(fields: [optionCategoryId], references: [id])
}
